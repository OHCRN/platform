datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

enum ConsentGroup {
  ADULT_CONSENT
  ADULT_CONSENT_SUBSTITUTE_DECISION_MAKER
  GUARDIAN_CONSENT_OF_MINOR
  GUARDIAN_CONSENT_OF_MINOR_INCLUDING_ASSENT
  YOUNG_ADULT_CONSENT
}

model Participant {
  id                  String                @id @default(cuid())
  consentGroup        ConsentGroup?
  emailVerified       Boolean               @default(false)
  isGuardian          Boolean
  guardianIdVerified  Boolean?
  ParticipantResponse ParticipantResponse[]
}

enum ConsentCategory {
  INFORMED_CONSENT
  CONSENT_RELEASE_DATA
  CONSENT_RESEARCH_PARTICIPATION
  CONSENT_RECONTACT
  CONSENT_REVIEW_SIGN
}

model ConsentQuestion {
  id                  String                @id
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  category            ConsentCategory
  ParticipantResponse ParticipantResponse[]
}

model ParticipantResponse {
  id                String          @default(cuid())
  participant       Participant     @relation(fields: [participantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  participantId     String
  consentQuestion   ConsentQuestion @relation(fields: [consentQuestionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  consentQuestionId String
  response          Boolean
  submittedAt       DateTime        @default(now())

  @@id([id, participantId, consentQuestionId])
}

model ClinicianInvite {
  id String @id @default(cuid())
  clinicianFirstName String
  clinicianInstitutionalEmailAddress String
  clinicianLastName String
  clinicianTitle String
  consentGroup ConsentGroup
  consentToBeContacted Boolean
  inviteSentDate String? @db.Char(10)
  inviteAcceptedDate String? @db.Char(10)
  inviteAccepted Boolean?
}
